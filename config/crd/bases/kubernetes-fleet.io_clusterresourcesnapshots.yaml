---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.4
  name: clusterresourcesnapshots.kubernetes-fleet.io
spec:
  group: kubernetes-fleet.io
  names:
    categories:
    - fleet-workload
    kind: ClusterResourceSnapshot
    listKind: ClusterResourceSnapshotList
    plural: clusterresourcesnapshots
    shortNames:
    - rss
    singular: clusterresourcesnapshot
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.generation
      name: Gen
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: "ClusterResourceSnapshot is used to store a snapshot of selected
          resources by a resource placement policy. Its spec is immutable. We may
          need to produce more than one resourceSnapshot for all the resources a ResourcePlacement
          selected to get around the 1MB size limit of k8s objects. We assign an ever-increasing
          index for each such group of resourceSnapshots. The naming convention of
          a clusterResourceSnapshot is {CRPName}-{resourceIndex}-{subindex} where
          the name of the first snapshot of a group has no subindex part so its name
          is {CRPName}-{resourceIndex}-snapshot. resourceIndex will begin with 0.
          Each snapshot MUST have the following labels: - `CRPTrackingLabel` which
          points to its owner CRP. - `ResourceIndexLabel` which is the index  of the
          snapshot group. - `IsLatestSnapshotLabel` which indicates whether the snapshot
          is the latest one. \n All the snapshots within the same index group must
          have the same ResourceIndexLabel. \n The first snapshot of the index group
          MUST have the following annotations: - `NumberOfResourceSnapshotsAnnotation`
          to store the total number of resource snapshots in the index group. - `ResourceGroupHashAnnotation`
          whose value is the sha-256 hash of all the snapshots belong to the same
          snapshot index. \n Each snapshot (excluding the first snapshot) MUST have
          the following annotations: - `SubindexOfResourceSnapshotAnnotation` to store
          the subindex of resource snapshot in the group."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: The desired state of ResourceSnapshot.
            properties:
              selectedResources:
                description: SelectedResources contains a list of resources selected
                  by ResourceSelectors.
                items:
                  description: ResourceContent contains the content of a resource
                  type: object
                  x-kubernetes-embedded-resource: true
                  x-kubernetes-preserve-unknown-fields: true
                type: array
            required:
            - selectedResources
            type: object
          status:
            description: The observed status of ResourceSnapshot.
            properties:
              conditions:
                description: Conditions is an array of current observed conditions
                  for ResourceSnapshot.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
