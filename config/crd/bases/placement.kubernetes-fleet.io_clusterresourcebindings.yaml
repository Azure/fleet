---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: clusterresourcebindings.placement.kubernetes-fleet.io
spec:
  group: placement.kubernetes-fleet.io
  names:
    categories:
    - fleet
    - fleet-placement
    kind: ClusterResourceBinding
    listKind: ClusterResourceBindingList
    plural: clusterresourcebindings
    shortNames:
    - rb
    singular: clusterresourcebinding
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="Bound")].status
      name: WorkCreated
      type: string
    - jsonPath: .status.conditions[?(@.type=="Applied")].status
      name: ResourcesApplied
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: |-
          ClusterResourceBinding represents a scheduling decision that binds a group of resources to a cluster.
          It MUST have a label named `CRPTrackingLabel` that points to the cluster resource policy that creates it.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: The desired state of ClusterResourceBinding.
            properties:
              applyStrategy:
                description: |-
                  ApplyStrategy describes how to resolve the conflict if the resource to be placed already exists in the target cluster
                  and is owned by other appliers.
                  This field is a beta-level feature.
                properties:
                  allowCoOwnership:
                    description: |-
                      AllowCoOwnership defines whether to apply the resource if it already exists in the target cluster and is not
                      solely owned by fleet (i.e., metadata.ownerReferences contains only fleet custom resources).
                      If true, apply the resource and add fleet as a co-owner.
                      If false, leave the resource unchanged and fail the apply.
                    type: boolean
                  serverSideApplyConfig:
                    description: ServerSideApplyConfig defines the configuration for
                      server side apply. It is honored only when type is ServerSideApply.
                    properties:
                      force:
                        description: |-
                          Force represents to force apply to succeed when resolving the conflicts
                          For any conflicting fields,
                          - If true, use the values from the resource to be applied to overwrite the values of the existing resource in the
                          target cluster, as well as take over ownership of such fields.
                          - If false, apply will fail with the reason ApplyConflictWithOtherApplier.


                          For non-conflicting fields, values stay unchanged and ownership are shared between appliers.
                        type: boolean
                    type: object
                  type:
                    default: ClientSideApply
                    description: |-
                      Type defines the type of strategy to use. Default to ClientSideApply.
                      Server-side apply is a safer choice. Read more about the differences between server-side apply and client-side
                      apply: https://kubernetes.io/docs/reference/using-api/server-side-apply/#comparison-with-client-side-apply.
                    enum:
                    - ClientSideApply
                    - ServerSideApply
                    type: string
                type: object
              clusterDecision:
                description: ClusterDecision explains why the scheduler selected this
                  cluster.
                properties:
                  clusterName:
                    description: |-
                      ClusterName is the name of the ManagedCluster. If it is not empty, its value should be unique cross all
                      placement decisions for the Placement.
                    type: string
                  clusterScore:
                    description: ClusterScore represents the score of the cluster
                      calculated by the scheduler.
                    properties:
                      affinityScore:
                        description: |-
                          AffinityScore represents the affinity score of the cluster calculated by the last
                          scheduling decision based on the preferred affinity selector.
                          An affinity score may not present if the cluster does not meet the required affinity.
                        format: int32
                        type: integer
                      priorityScore:
                        description: |-
                          TopologySpreadScore represents the priority score of the cluster calculated by the last
                          scheduling decision based on the topology spread applied to the cluster.
                          A priority score may not present if the cluster does not meet the topology spread.
                        format: int32
                        type: integer
                    type: object
                  reason:
                    description: Reason represents the reason why the cluster is selected
                      or not.
                    type: string
                  selected:
                    description: Selected indicates if this cluster is selected by
                      the scheduler.
                    type: boolean
                required:
                - clusterName
                - reason
                - selected
                type: object
              clusterResourceOverrideSnapshots:
                description: |-
                  ClusterResourceOverrides contains a list of applicable ClusterResourceOverride snapshot names associated with the
                  selected resources.
                items:
                  type: string
                type: array
              resourceOverrideSnapshots:
                description: ResourceOverrideSnapshots is a list of ResourceOverride
                  snapshots associated with the selected resources.
                items:
                  description: NamespacedName comprises a resource name, with a mandatory
                    namespace.
                  properties:
                    name:
                      description: Name is the name of the namespaced scope resource.
                      type: string
                    namespace:
                      description: Namespace is namespace of the namespaced scope
                        resource.
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
                type: array
              resourceSnapshotName:
                description: |-
                  ResourceSnapshotName is the name of the resource snapshot that this resource binding points to.
                  If the resources are divided into multiple snapshots because of the resource size limit,
                  it points to the name of the leading snapshot of the index group.
                type: string
              schedulingPolicySnapshotName:
                description: |-
                  SchedulingPolicySnapshotName is the name of the scheduling policy snapshot that this resource binding
                  points to; more specifically, the scheduler creates this bindings in accordance with this
                  scheduling policy snapshot.
                type: string
              state:
                description: 'The desired state of the binding. Possible values: Scheduled,
                  Bound, Unscheduled.'
                type: string
              targetCluster:
                description: TargetCluster is the name of the cluster that the scheduler
                  assigns the resources to.
                type: string
            required:
            - clusterDecision
            - resourceSnapshotName
            - schedulingPolicySnapshotName
            - state
            - targetCluster
            type: object
          status:
            description: The observed status of ClusterResourceBinding.
            properties:
              conditions:
                description: Conditions is an array of current observed conditions
                  for ClusterResourceBinding.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              failedPlacements:
                description: |-
                  FailedPlacements is a list of all the resources failed to be placed to the given cluster or the resource is unavailable.
                  Note that we only include 100 failed resource placements even if there are more than 100.
                items:
                  description: FailedResourcePlacement contains the failure details
                    of a failed resource placement.
                  properties:
                    condition:
                      description: The failed condition status.
                      properties:
                        lastTransitionTime:
                          description: |-
                            lastTransitionTime is the last time the condition transitioned from one status to another.
                            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                          format: date-time
                          type: string
                        message:
                          description: |-
                            message is a human readable message indicating details about the transition.
                            This may be an empty string.
                          maxLength: 32768
                          type: string
                        observedGeneration:
                          description: |-
                            observedGeneration represents the .metadata.generation that the condition was set based upon.
                            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                            with respect to the current state of the instance.
                          format: int64
                          minimum: 0
                          type: integer
                        reason:
                          description: |-
                            reason contains a programmatic identifier indicating the reason for the condition's last transition.
                            Producers of specific condition types may define expected values and meanings for this field,
                            and whether the values are considered a guaranteed API.
                            The value should be a CamelCase string.
                            This field may not be empty.
                          maxLength: 1024
                          minLength: 1
                          pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                          type: string
                        status:
                          description: status of the condition, one of True, False,
                            Unknown.
                          enum:
                          - "True"
                          - "False"
                          - Unknown
                          type: string
                        type:
                          description: |-
                            type of condition in CamelCase or in foo.example.com/CamelCase.
                            ---
                            Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                            useful (see .node.status.conditions), the ability to deconflict is important.
                            The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                          maxLength: 316
                          pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                          type: string
                      required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                      type: object
                    envelope:
                      description: Envelope identifies the envelope object that contains
                        this resource.
                      properties:
                        name:
                          description: Name of the envelope object.
                          type: string
                        namespace:
                          description: Namespace is the namespace of the envelope
                            object. Empty if the envelope object is cluster scoped.
                          type: string
                        type:
                          default: ConfigMap
                          description: Type of the envelope object.
                          enum:
                          - ConfigMap
                          type: string
                      required:
                      - name
                      type: object
                    group:
                      description: Group is the group name of the selected resource.
                      type: string
                    kind:
                      description: Kind represents the Kind of the selected resources.
                      type: string
                    name:
                      description: Name of the target resource.
                      type: string
                    namespace:
                      description: Namespace is the namespace of the resource. Empty
                        if the resource is cluster scoped.
                      type: string
                    version:
                      description: Version is the version of the selected resource.
                      type: string
                  required:
                  - condition
                  - kind
                  - name
                  - version
                  type: object
                maxItems: 100
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="Bound")].status
      name: WorkCreated
      type: string
    - jsonPath: .status.conditions[?(@.type=="Applied")].status
      name: ResourcesApplied
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: |-
          ClusterResourceBinding represents a scheduling decision that binds a group of resources to a cluster.
          It MUST have a label named `CRPTrackingLabel` that points to the cluster resource policy that creates it.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: The desired state of ClusterResourceBinding.
            properties:
              applyStrategy:
                description: |-
                  ApplyStrategy describes how to resolve the conflict if the resource to be placed already exists in the target cluster
                  and is owned by other appliers.
                properties:
                  actionType:
                    default: AlwaysApply
                    description: |-
                      TakeoverAction determines the action to take when Fleet applies resources to a member
                      cluster for the first time and finds out that the resource already exists in the cluster.


                      This setting is most relevant in cases where you would like Fleet to manage pre-existing
                      resources on a member cluster.


                      Available options include:


                      * AlwaysApply: with this action, Fleet will apply the hub cluster manifests to the member
                        clusters even if the affected resources already exist. This is the default action.


                        Note that this might lead to some fields being overwritten on the member clusters.


                      * ApplyIfNoDiff: with this action, Fleet will apply the hub cluster manifests to the member
                        clusters if (and only if) pre-existing resources look the same as the hub cluster manifests.
                        This is a safer option as pre-existing resources that are inconsistent with the hub cluster
                        manifests will not be overwritten; in fact, Fleet will ignore them until the inconsistencies
                        are resolved properly: any change you make to the hub cluster manifests would not be
                        applied, and if you delete the manifests or even the ClusterResourcePlacement itself
                        from the hub cluster, these pre-existing resources would still remain.


                        Fleet will check for inconsistencies in accordance with the DiffMode setting. See also
                        the comments on the DiffMode field for more information.


                        If a diff has been found in a field that is managed by Fleet (i.e., the field is specified
                        in the hub cluster manifest), consider one of the following actions:
                        * set the field in the member cluster to be of the same value as that in the hub cluster
                          manifest.
                        * update the hub cluster manifest so that its field value matches with that in the member
                          cluster.
                        * switch to the AlwaysApply action, which will allow Fleet to overwrite the field with the
                          value in the hub cluster manifest.


                        If a diff has been found in a field that is not managed by Fleet (i.e., the field is not
                        specified in the hub cluster manifest), consider one of the following actions:
                        * remove the field from the member cluster.
                        * update the hub cluster manifest so that the field is included in the hub cluster manifest.


                        If appropriate, you may also delete the object from the member cluster; Fleet will recreate
                        it using the hub cluster manifest.
                    enum:
                    - AlwaysApply
                    - ApplyIfNoDiff
                    type: string
                  allowCoOwnership:
                    description: |-
                      AllowCoOwnership defines whether to apply the resource if it already exists in the target cluster and is not
                      solely owned by fleet (i.e., metadata.ownerReferences contains only fleet custom resources).
                      If true, apply the resource and add fleet as a co-owner.
                      If false, leave the resource unchanged and fail the apply.
                    type: boolean
                  diffMode:
                    default: ApplyDiff
                    description: |-
                      DiffMode controls the way Fleet detects inconsistencies between a resource's desired state
                      as kept in the Fleet hub cluster and its current state.


                      This field is in effect when the ClusterResourcePlacement is configured to use the
                      ReportIfDiff apply strategy and/or the ApplyIfNoDiff takeover action.


                      Available options include:


                      * ApplyDiff: with this mode, Fleet considers that a placed object has drifted from its
                        desired state if (and only if) there are value differences in fields that are managed
                        by Fleet (i.e., the fields that are specified explicitly in the hub cluster manifests).
                        Differences in unmanaged fields will be ignored. This is the default mode.


                        Note that as an exception, Fleet will always check for differences in the object
                        labels and annotations, even if the affected label/annotation keys are absent in the hub
                        cluster manifests.


                      * FullDiff: with this mode, Fleet considers that a placed object has drifted from its
                        desired state if there are values differences in any object field, even if the field is
                        not managed by Fleet (i.e., the field is not specified in the hub cluster manifest). This
                        effectively assumes that an object must look exactly the same in the hub cluster and the
                        member clusters.


                        If you prefer using this mode, it is recommended that you
                        * specify all the fields of interest explicitly in the hub cluster manifests, even if
                          you are OK with using default values for some fields; and
                        * make sure that no fields are managed by agents other than Fleet in the member clusters,
                          such as HPAs, VPAs, or other controllers.
                    enum:
                    - ApplyDiff
                    - FullDiff
                    type: string
                  serverSideApplyConfig:
                    description: ServerSideApplyConfig defines the configuration for
                      server side apply. It is honored only when type is ServerSideApply.
                    properties:
                      force:
                        description: |-
                          Force represents to force apply to succeed when resolving the conflicts
                          For any conflicting fields,
                          - If true, use the values from the resource to be applied to overwrite the values of the existing resource in the
                          target cluster, as well as take over ownership of such fields.
                          - If false, apply will fail with the reason ApplyConflictWithOtherApplier.


                          For non-conflicting fields, values stay unchanged and ownership are shared between appliers.
                        type: boolean
                    type: object
                  type:
                    default: ClientSideApply
                    description: |-
                      Type is the apply strategy to use; it determines how Fleet applies manifests from the
                      hub cluster to a member cluster.


                      Available options are:


                      * ClientSideApply: Fleet uses three-way merge to apply manifests, similar to how kubectl
                        performs a client-side apply. This is the default option.


                        Note that this strategy requires that Fleet keep the last applied configuration in the
                        annoation of an applied resource. If the object gets so large that apply ops can no longer
                        be executed, Fleet will switch to server-side apply.


                      * ServerSideApply: Fleet uses server-side apply to apply manifests; Fleet itself will
                        become the field manager for specified fields in the manifests. Specify
                        ServerSideApplyConfig as appropriate if you would like Fleet to take over field
                        ownership upon conflicts. This is the recommended option for most scenarios; it might
                        help reduce object size and safely resolve conflicts between field values. For more
                        information, please refer to the Kubernetes documentation
                        (https://kubernetes.io/docs/reference/using-api/server-side-apply/#comparison-with-client-side-apply).


                        Note that with this strategy, any change made to the managed fields by agents other than
                        Fleet in the member cluster will be overwritten periodically. If you would like Fleet
                        to detect such changes and report them rather than overwritting values as soon as Fleet
                        finds the inconsistencies, consider using the ReportApplyDiff or ReportAnyDiff strategies.


                      * ReportIfDiff: Fleet uses server-side apply to apply manifests, and will report
                        that an object has drifted from its desired state if an inconsistency has been found
                        in accordance with the DiffMode setting. This is helpful in drift detection scenarios,
                        where you would like to identify ad-hoc changes made to placed objects in
                        the member clusters.


                        See also the comments on the DiffMode field for more information.


                        If a diff has been found in a field that is managed by Fleet (i.e., the field is specified
                        in the hub cluster manifest), consider one of the following actions:


                        * revert the field change in all drifted member clusters.
                        * update the hub cluster manifest; this will trigger Fleet to apply the latest revision
                          of the manifests, which will overwrite the drifted field.
                        * switch to the ServerSideApply strategy, which will allow Fleet to overwrite the drifted
                          field with the current revision of manifests.


                        If a diff has been found in a field that is not managed by Fleet (i.e., the field is not
                        specified in the hub cluster manifest), consider one of the following actions:


                        * remove the field from all drifted member clusters.
                        * update the hub cluster manifest so that the field is included in the hub cluster
                          manifest.


                      For a comparison between the different strategies and some examples, please refer to the
                      Fleet documentation.
                    enum:
                    - ClientSideApply
                    - ServerSideApply
                    - ReportIfDiff
                    type: string
                type: object
              clusterDecision:
                description: ClusterDecision explains why the scheduler selected this
                  cluster.
                properties:
                  clusterName:
                    description: |-
                      ClusterName is the name of the ManagedCluster. If it is not empty, its value should be unique cross all
                      placement decisions for the Placement.
                    type: string
                  clusterScore:
                    description: ClusterScore represents the score of the cluster
                      calculated by the scheduler.
                    properties:
                      affinityScore:
                        description: |-
                          AffinityScore represents the affinity score of the cluster calculated by the last
                          scheduling decision based on the preferred affinity selector.
                          An affinity score may not present if the cluster does not meet the required affinity.
                        format: int32
                        type: integer
                      priorityScore:
                        description: |-
                          TopologySpreadScore represents the priority score of the cluster calculated by the last
                          scheduling decision based on the topology spread applied to the cluster.
                          A priority score may not present if the cluster does not meet the topology spread.
                        format: int32
                        type: integer
                    type: object
                  reason:
                    description: Reason represents the reason why the cluster is selected
                      or not.
                    type: string
                  selected:
                    description: Selected indicates if this cluster is selected by
                      the scheduler.
                    type: boolean
                required:
                - clusterName
                - reason
                - selected
                type: object
              clusterResourceOverrideSnapshots:
                description: |-
                  ClusterResourceOverrides contains a list of applicable ClusterResourceOverride snapshot names associated with the
                  selected resources.
                items:
                  type: string
                type: array
              resourceOverrideSnapshots:
                description: ResourceOverrideSnapshots is a list of ResourceOverride
                  snapshots associated with the selected resources.
                items:
                  description: NamespacedName comprises a resource name, with a mandatory
                    namespace.
                  properties:
                    name:
                      description: Name is the name of the namespaced scope resource.
                      type: string
                    namespace:
                      description: Namespace is namespace of the namespaced scope
                        resource.
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
                type: array
              resourceSnapshotName:
                description: |-
                  ResourceSnapshotName is the name of the resource snapshot that this resource binding points to.
                  If the resources are divided into multiple snapshots because of the resource size limit,
                  it points to the name of the leading snapshot of the index group.
                type: string
              schedulingPolicySnapshotName:
                description: |-
                  SchedulingPolicySnapshotName is the name of the scheduling policy snapshot that this resource binding
                  points to; more specifically, the scheduler creates this bindings in accordance with this
                  scheduling policy snapshot.
                type: string
              state:
                description: 'The desired state of the binding. Possible values: Scheduled,
                  Bound, Unscheduled.'
                type: string
              targetCluster:
                description: TargetCluster is the name of the cluster that the scheduler
                  assigns the resources to.
                type: string
            required:
            - clusterDecision
            - resourceSnapshotName
            - schedulingPolicySnapshotName
            - state
            - targetCluster
            type: object
          status:
            description: The observed status of ClusterResourceBinding.
            properties:
              conditions:
                description: Conditions is an array of current observed conditions
                  for ClusterResourceBinding.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              failedPlacements:
                description: |-
                  FailedPlacements is a list of all the resources failed to be placed to the given cluster or the resource is unavailable.
                  Note that we only include 100 failed resource placements even if there are more than 100.
                items:
                  description: FailedResourcePlacement contains the failure details
                    of a failed resource placement.
                  properties:
                    condition:
                      description: The failed condition status.
                      properties:
                        lastTransitionTime:
                          description: |-
                            lastTransitionTime is the last time the condition transitioned from one status to another.
                            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                          format: date-time
                          type: string
                        message:
                          description: |-
                            message is a human readable message indicating details about the transition.
                            This may be an empty string.
                          maxLength: 32768
                          type: string
                        observedGeneration:
                          description: |-
                            observedGeneration represents the .metadata.generation that the condition was set based upon.
                            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                            with respect to the current state of the instance.
                          format: int64
                          minimum: 0
                          type: integer
                        reason:
                          description: |-
                            reason contains a programmatic identifier indicating the reason for the condition's last transition.
                            Producers of specific condition types may define expected values and meanings for this field,
                            and whether the values are considered a guaranteed API.
                            The value should be a CamelCase string.
                            This field may not be empty.
                          maxLength: 1024
                          minLength: 1
                          pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                          type: string
                        status:
                          description: status of the condition, one of True, False,
                            Unknown.
                          enum:
                          - "True"
                          - "False"
                          - Unknown
                          type: string
                        type:
                          description: |-
                            type of condition in CamelCase or in foo.example.com/CamelCase.
                            ---
                            Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                            useful (see .node.status.conditions), the ability to deconflict is important.
                            The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                          maxLength: 316
                          pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                          type: string
                      required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                      type: object
                    envelope:
                      description: Envelope identifies the envelope object that contains
                        this resource.
                      properties:
                        name:
                          description: Name of the envelope object.
                          type: string
                        namespace:
                          description: Namespace is the namespace of the envelope
                            object. Empty if the envelope object is cluster scoped.
                          type: string
                        type:
                          default: ConfigMap
                          description: Type of the envelope object.
                          enum:
                          - ConfigMap
                          type: string
                      required:
                      - name
                      type: object
                    group:
                      description: Group is the group name of the selected resource.
                      type: string
                    kind:
                      description: Kind represents the Kind of the selected resources.
                      type: string
                    name:
                      description: Name of the target resource.
                      type: string
                    namespace:
                      description: Namespace is the namespace of the resource. Empty
                        if the resource is cluster scoped.
                      type: string
                    version:
                      description: Version is the version of the selected resource.
                      type: string
                  required:
                  - condition
                  - kind
                  - name
                  - version
                  type: object
                maxItems: 100
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
