---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: clusterresourceplacementrebalances.placement.kubernetes-fleet.io
spec:
  group: placement.kubernetes-fleet.io
  names:
    categories:
    - fleet
    - fleet-placement
    kind: ClusterResourcePlacementRebalance
    listKind: ClusterResourcePlacementRebalanceList
    plural: clusterresourceplacementrebalances
    singular: clusterresourceplacementrebalance
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          ClusterResourcePlacementRebalance is a rebalancing attempt on a ClusterResourcePlacement
          object; one may use this API to ask Fleet to produce a new set of scheduling decisions
          for the ClusterResourcePlacement object. This is most helpful in cases where certain
          clusters in the fleet have become hotspots and the developers would like move select
          workloads to less resource strained clusters to improve the system utilization.


          The execution of the rebalacing operation is subject to the rollout strategy defined
          in the ClusterResourcePlacement object. This behavior is akin to editing the placement policy
          of the ClusterResourcePlacement object; disruption budget would not apply to this operation.


          To trigger a rebalancing operation, create a ClusterResourcePlacementRebalance object with
          the same name as the target ClusterResourcePlacement object. This guarantees a 1:1 link
          between the two objects.


          For safety reasons, Fleet will only execute a rebalancing attempt once; this object has no
          spec and once executed, the object will be ignored afterwards. To trigger another rebalancing
          attempt on the same ClusterResourcePlacement object, re-create (delete and create) the
          same ClusterResourcePlacementRebalance object. Note also that a ClusterResourcePlacementRebalance
          object will be ignored once it is deemed invalid (e.g., the target ClusterResourcePlacement object
          does not exist); even if the ClusterResourcePlacement object later appears, Fleet will not
          process the ClusterResourcePlacementRebalance object again.


          Rebalacing attempts work only with ClusterResourcePlacement objects of the PickN placement type.


          Executed rebalancing attempts might be kept around for a while for auditing purposes; the
          Fleet controllers might have a TTL set up for such objects and will garbage collect them
          automatically. For further information, see the Fleet documentation.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          status:
            description: Status is the observed state of the ClusterResourcePlacementRebalance
              object.
            properties:
              conditions:
                description: |-
                  Conditions is the list of currently observed conditions for the
                  ClusterResourcePlacementEviction object.


                  Available condition types include:
                  * Valid: whether the Eviction object is valid, i.e., it targets at a valid placement.
                  * Executed: whether the Eviction object has been executed.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
